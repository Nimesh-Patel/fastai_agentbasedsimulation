<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="fsti-agent_8c" kind="file" language="C++">
    <compoundname>fsti-agent.c</compoundname>
    <includes local="no">string.h</includes>
    <includes local="no">math.h</includes>
    <includes refid="fsti-agent_8h" local="yes">fsti-agent.h</includes>
    <includes local="yes">/Users/eduardgrebe/dev/faststi-eduard/src/utils/test.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="yes">/Users/eduardgrebe/dev/faststi-eduard/src/utils/array.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="yes">/Users/eduardgrebe/dev/faststi-eduard/src/utils/algorithms.h</includes>
    <includes local="no">float.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="yes">/Users/eduardgrebe/dev/faststi-eduard/src/utils/csv.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes local="yes">/Users/eduardgrebe/dev/faststi-eduard/src/fsti-error.h</includes>
    <incdepgraph>
      <node id="11">
        <label>stdbool.h</label>
      </node>
      <node id="22">
        <label>stdarg.h</label>
      </node>
      <node id="15">
        <label>fsti-userdefs.h</label>
        <link refid="fsti-userdefs_8h_source"/>
      </node>
      <node id="14">
        <label>assert.h</label>
      </node>
      <node id="23">
        <label>/Users/eduardgrebe/dev/faststi-eduard/src/fsti-error.h</label>
      </node>
      <node id="19">
        <label>float.h</label>
      </node>
      <node id="6">
        <label>stdint.h</label>
      </node>
      <node id="9">
        <label>stdlib.h</label>
      </node>
      <node id="18">
        <label>/Users/eduardgrebe/dev/faststi-eduard/src/utils/algorithms.h</label>
      </node>
      <node id="20">
        <label>/Users/eduardgrebe/dev/faststi-eduard/src/utils/csv.h</label>
      </node>
      <node id="21">
        <label>errno.h</label>
      </node>
      <node id="10">
        <label>stddef.h</label>
      </node>
      <node id="13">
        <label>fsti-config.h</label>
        <link refid="fsti-config_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>string.h</label>
      </node>
      <node id="7">
        <label>utils/utils.h</label>
      </node>
      <node id="12">
        <label>fsti-defaults.h</label>
        <link refid="fsti-defaults_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>fsti-defs.h</label>
        <link refid="fsti-defs_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="0">
        <label>/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c</label>
        <link refid="fsti-agent_8c"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>fsti-agent.h</label>
        <link refid="fsti-agent_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>math.h</label>
      </node>
      <node id="5">
        <label>gsl/gsl_rng.h</label>
      </node>
      <node id="17">
        <label>/Users/eduardgrebe/dev/faststi-eduard/src/utils/array.h</label>
      </node>
      <node id="16">
        <label>/Users/eduardgrebe/dev/faststi-eduard/src/utils/test.h</label>
      </node>
      <node id="4">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="fsti-agent_8c_1a0d0890f5771bd3efa056881d37f4c6b9" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref></type>
        <definition>struct fsti_agent_arr fsti_saved_agent_arr</definition>
        <argsstring></argsstring>
        <name>fsti_saved_agent_arr</name>
        <initializer>= {NULL, 0, 0, NULL}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="1" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="7" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="fsti-agent_8c_1ad24c55a9a2a07b7a0a07a0fb74be112e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsti_agent_print_csv</definition>
        <argsstring>(FILE *f, unsigned id, struct fsti_agent *agent)</argsstring>
        <name>fsti_agent_print_csv</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>id</declname>
        </param>
        <param>
          <type>struct <ref refid="structfsti__agent" kindref="compound">fsti_agent</ref> *</type>
          <declname>agent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Description of the fsti_agent_print_csv function </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="12" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="12" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1a067437e70d5fe4d1e6f139bab513c6ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsti_agent_print_pretty</definition>
        <argsstring>(FILE *f, unsigned id, struct fsti_agent *agent)</argsstring>
        <name>fsti_agent_print_pretty</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>id</declname>
        </param>
        <param>
          <type>struct <ref refid="structfsti__agent" kindref="compound">fsti_agent</ref> *</type>
          <declname>agent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="17" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="17" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1ac3681ff2f8616442d578a983ec0c17ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fsti_agent_has_partner</definition>
        <argsstring>(const struct fsti_agent *agent)</argsstring>
        <name>fsti_agent_has_partner</name>
        <param>
          <type>const struct <ref refid="structfsti__agent" kindref="compound">fsti_agent</ref> *</type>
          <declname>agent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="22" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="22" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1afaf3c076c60db61e182fb1e5a8eabc77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsti_agent_make_half_partner</definition>
        <argsstring>(struct fsti_agent *a, struct fsti_agent *b)</argsstring>
        <name>fsti_agent_make_half_partner</name>
        <param>
          <type>struct <ref refid="structfsti__agent" kindref="compound">fsti_agent</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>struct <ref refid="structfsti__agent" kindref="compound">fsti_agent</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="31" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="31" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1aab565f3b1fa1cb77b6a83efd3faa72e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsti_agent_make_partners</definition>
        <argsstring>(struct fsti_agent *a, struct fsti_agent *b)</argsstring>
        <name>fsti_agent_make_partners</name>
        <param>
          <type>struct <ref refid="structfsti__agent" kindref="compound">fsti_agent</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>struct <ref refid="structfsti__agent" kindref="compound">fsti_agent</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="36" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="36" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1a69108c3779a3689185b833a70f589225" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsti_agent_break_half_partner</definition>
        <argsstring>(struct fsti_agent *a, struct fsti_agent *b)</argsstring>
        <name>fsti_agent_break_half_partner</name>
        <param>
          <type>struct <ref refid="structfsti__agent" kindref="compound">fsti_agent</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>struct <ref refid="structfsti__agent" kindref="compound">fsti_agent</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="43" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="43" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1a66a819f51531e6f89f92addab960ae3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsti_agent_break_partners</definition>
        <argsstring>(struct fsti_agent *a, struct fsti_agent *b)</argsstring>
        <name>fsti_agent_break_partners</name>
        <param>
          <type>struct <ref refid="structfsti__agent" kindref="compound">fsti_agent</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>struct <ref refid="structfsti__agent" kindref="compound">fsti_agent</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="56" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="56" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1a0624a840237ec82520be71b241220226" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float fsti_agent_default_distance</definition>
        <argsstring>(const struct fsti_agent *a, const struct fsti_agent *b)</argsstring>
        <name>fsti_agent_default_distance</name>
        <param>
          <type>const struct <ref refid="structfsti__agent" kindref="compound">fsti_agent</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const struct <ref refid="structfsti__agent" kindref="compound">fsti_agent</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="64" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="64" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1a63a22afc13737a55174adb97f2cbcfc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsti_agent_arr_add_dependency</definition>
        <argsstring>(struct fsti_agent_arr *agent_arr, struct fsti_agent_ind *agent_ind)</argsstring>
        <name>fsti_agent_arr_add_dependency</name>
        <param>
          <type>struct <ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref> *</type>
          <declname>agent_arr</declname>
        </param>
        <param>
          <type>struct <ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref> *</type>
          <declname>agent_ind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="76" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="76" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1a87de33f5c064440c162d0c8d0f9ccbf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsti_agent_arr_fill_n</definition>
        <argsstring>(struct fsti_agent_arr *agent_arr, size_t n)</argsstring>
        <name>fsti_agent_arr_fill_n</name>
        <param>
          <type>struct <ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref> *</type>
          <declname>agent_arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="88" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="88" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1a2dc08a5f50e57b979f50f6efb927d57c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsti_agent_arr_init_n</definition>
        <argsstring>(struct fsti_agent_arr *agent_arr, size_t n)</argsstring>
        <name>fsti_agent_arr_init_n</name>
        <param>
          <type>struct <ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref> *</type>
          <declname>agent_arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="97" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="97" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1ab657b71989567b40adc4ccea49292540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsti_agent_arr_init</definition>
        <argsstring>(struct fsti_agent_arr *agent_arr)</argsstring>
        <name>fsti_agent_arr_init</name>
        <param>
          <type>struct <ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref> *</type>
          <declname>agent_arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="109" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1a30c755dbd7cd8e98b76ebe65b8dc54a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structfsti__agent" kindref="compound">fsti_agent</ref> *</type>
        <definition>struct fsti_agent* fsti_agent_arr_begin</definition>
        <argsstring>(struct fsti_agent_arr *agent_arr)</argsstring>
        <name>fsti_agent_arr_begin</name>
        <param>
          <type>struct <ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref> *</type>
          <declname>agent_arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="114" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="114" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1a1a5fc4621ece587a603b9b970bc3bd7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structfsti__agent" kindref="compound">fsti_agent</ref> *</type>
        <definition>struct fsti_agent* fsti_agent_arr_end</definition>
        <argsstring>(struct fsti_agent_arr *agent_arr)</argsstring>
        <name>fsti_agent_arr_end</name>
        <param>
          <type>struct <ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref> *</type>
          <declname>agent_arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="119" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="119" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1a9f01e2df0acb48b1e9cef63d4314c209" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structfsti__agent" kindref="compound">fsti_agent</ref> *</type>
        <definition>struct fsti_agent* fsti_agent_arr_at</definition>
        <argsstring>(struct fsti_agent_arr *agent_arr, size_t index)</argsstring>
        <name>fsti_agent_arr_at</name>
        <param>
          <type>struct <ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref> *</type>
          <declname>agent_arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="125" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="125" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1aaad30933ebf477fc44ee2f7123d335b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structfsti__agent" kindref="compound">fsti_agent</ref> *</type>
        <definition>struct fsti_agent* fsti_agent_arr_front</definition>
        <argsstring>(struct fsti_agent_arr *agent_arr)</argsstring>
        <name>fsti_agent_arr_front</name>
        <param>
          <type>struct <ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref> *</type>
          <declname>agent_arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="131" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="131" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1a88eb4bd7a7df9dcbc5b57d3e3e22f9c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structfsti__agent" kindref="compound">fsti_agent</ref> *</type>
        <definition>struct fsti_agent* fsti_agent_arr_back</definition>
        <argsstring>(struct fsti_agent_arr *agent_arr)</argsstring>
        <name>fsti_agent_arr_back</name>
        <param>
          <type>struct <ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref> *</type>
          <declname>agent_arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="136" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1a8ea9850f51ba1cc3f842f3730cf22139" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structfsti__agent" kindref="compound">fsti_agent</ref> *</type>
        <definition>struct fsti_agent* fsti_agent_partner_get</definition>
        <argsstring>(struct fsti_agent_arr *agent_arr, struct fsti_agent *agent, size_t index)</argsstring>
        <name>fsti_agent_partner_get</name>
        <param>
          <type>struct <ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref> *</type>
          <declname>agent_arr</declname>
        </param>
        <param>
          <type>struct <ref refid="structfsti__agent" kindref="compound">fsti_agent</ref> *</type>
          <declname>agent</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="141" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="141" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1abe4c0c13ceb1a50eb8d9223a7122f269" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structfsti__agent" kindref="compound">fsti_agent</ref> *</type>
        <definition>struct fsti_agent* fsti_agent_partner_get0</definition>
        <argsstring>(struct fsti_agent_arr *agent_arr, struct fsti_agent *agent)</argsstring>
        <name>fsti_agent_partner_get0</name>
        <param>
          <type>struct <ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref> *</type>
          <declname>agent_arr</declname>
        </param>
        <param>
          <type>struct <ref refid="structfsti__agent" kindref="compound">fsti_agent</ref> *</type>
          <declname>agent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="151" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="151" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1ac2464e76c0be700d28c2a66d6486c021" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void arr_allocate</definition>
        <argsstring>(struct fsti_agent_arr *agent_arr)</argsstring>
        <name>arr_allocate</name>
        <param>
          <type>struct <ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref> *</type>
          <declname>agent_arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="157" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="157" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1ad45a2753cc652bf4dcf866805d94f54e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ind_allocate</definition>
        <argsstring>(struct fsti_agent_ind *agent_ind)</argsstring>
        <name>ind_allocate</name>
        <param>
          <type>struct <ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref> *</type>
          <declname>agent_ind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="171" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="171" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1a0cf9bb69026e48287e83f9d73841f90f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsti_agent_arr_push</definition>
        <argsstring>(struct fsti_agent_arr *agent_arr, const struct fsti_agent *agent)</argsstring>
        <name>fsti_agent_arr_push</name>
        <param>
          <type>struct <ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref> *</type>
          <declname>agent_arr</declname>
        </param>
        <param>
          <type>const struct <ref refid="structfsti__agent" kindref="compound">fsti_agent</ref> *</type>
          <declname>agent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="184" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="184" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1a140245276760c5ca1467b816dfdb16d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structfsti__agent" kindref="compound">fsti_agent</ref> *</type>
        <definition>struct fsti_agent* fsti_agent_arr_pop</definition>
        <argsstring>(struct fsti_agent_arr *agent_arr)</argsstring>
        <name>fsti_agent_arr_pop</name>
        <param>
          <type>struct <ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref> *</type>
          <declname>agent_arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="199" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="199" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1ad710a67a71582f5e8a63490c1afe3a3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsti_agent_ind_fill_n</definition>
        <argsstring>(struct fsti_agent_ind *agent_ind, size_t n)</argsstring>
        <name>fsti_agent_ind_fill_n</name>
        <param>
          <type>struct <ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref> *</type>
          <declname>agent_ind</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="206" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="206" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1a863d835b0643a8d62d8621bd512fd902" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsti_agent_ind_init_n</definition>
        <argsstring>(struct fsti_agent_ind *agent_ind, struct fsti_agent_arr *agent_arr, size_t n)</argsstring>
        <name>fsti_agent_ind_init_n</name>
        <param>
          <type>struct <ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref> *</type>
          <declname>agent_ind</declname>
        </param>
        <param>
          <type>struct <ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref> *</type>
          <declname>agent_arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="215" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="215" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1a15fb161e3b2c757f6dc7d67af4e6ef3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsti_agent_ind_init</definition>
        <argsstring>(struct fsti_agent_ind *agent_ind, struct fsti_agent_arr *agent_arr)</argsstring>
        <name>fsti_agent_ind_init</name>
        <param>
          <type>struct <ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref> *</type>
          <declname>agent_ind</declname>
        </param>
        <param>
          <type>struct <ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref> *</type>
          <declname>agent_arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="231" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="231" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1af8ec082c043d0719f2933f78c9b74879" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t *</type>
        <definition>size_t* fsti_agent_ind_begin</definition>
        <argsstring>(struct fsti_agent_ind *agent_ind)</argsstring>
        <name>fsti_agent_ind_begin</name>
        <param>
          <type>struct <ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref> *</type>
          <declname>agent_ind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="237" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="237" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1a0a007fca1a85b26dc9f890b5c9f5649a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t *</type>
        <definition>size_t* fsti_agent_ind_end</definition>
        <argsstring>(struct fsti_agent_ind *agent_ind)</argsstring>
        <name>fsti_agent_ind_end</name>
        <param>
          <type>struct <ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref> *</type>
          <declname>agent_ind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="242" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="242" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1a4c099994dc5a8cedc1de073fa64bfbcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t *</type>
        <definition>size_t* fsti_agent_ind_at</definition>
        <argsstring>(struct fsti_agent_ind *agent_ind, size_t index)</argsstring>
        <name>fsti_agent_ind_at</name>
        <param>
          <type>struct <ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref> *</type>
          <declname>agent_ind</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="247" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="247" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1a0d3fcfadb1159b63508be133b30f8df7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structfsti__agent" kindref="compound">fsti_agent</ref> *</type>
        <definition>struct fsti_agent* fsti_agent_ind_arrp</definition>
        <argsstring>(struct fsti_agent_ind *agent_ind, size_t *it)</argsstring>
        <name>fsti_agent_ind_arrp</name>
        <param>
          <type>struct <ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref> *</type>
          <declname>agent_ind</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="253" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="253" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1a0e45e82b7f4f019b1813daf04717b894" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structfsti__agent" kindref="compound">fsti_agent</ref> *</type>
        <definition>struct fsti_agent* fsti_agent_ind_arr</definition>
        <argsstring>(struct fsti_agent_ind *agent_ind, size_t index)</argsstring>
        <name>fsti_agent_ind_arr</name>
        <param>
          <type>struct <ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref> *</type>
          <declname>agent_ind</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="259" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="259" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1aeb0ffefe572b09e4e3d8e33571e256da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsti_agent_ind_push</definition>
        <argsstring>(struct fsti_agent_ind *agent_ind, size_t index)</argsstring>
        <name>fsti_agent_ind_push</name>
        <param>
          <type>struct <ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref> *</type>
          <declname>agent_ind</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="265" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="265" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1a40bb88f7ef7f1adc5b3bf76964f5ce03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t fsti_agent_ind_pop</definition>
        <argsstring>(struct fsti_agent_ind *agent_ind)</argsstring>
        <name>fsti_agent_ind_pop</name>
        <param>
          <type>struct <ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref> *</type>
          <declname>agent_ind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="275" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="275" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1a9005e4c20f02aff3ad90dafbaa630583" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsti_agent_ind_remove</definition>
        <argsstring>(struct fsti_agent_ind *agent_ind, size_t *it)</argsstring>
        <name>fsti_agent_ind_remove</name>
        <param>
          <type>struct <ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref> *</type>
          <declname>agent_ind</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="282" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="282" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1ae598f299bc63165f2f0b5c9d5c72e52c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsti_agent_ind_shuffle</definition>
        <argsstring>(struct fsti_agent_ind *agent_ind, gsl_rng *rng)</argsstring>
        <name>fsti_agent_ind_shuffle</name>
        <param>
          <type>struct <ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref> *</type>
          <declname>agent_ind</declname>
        </param>
        <param>
          <type>gsl_rng *</type>
          <declname>rng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="289" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="289" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1a762cb927867ee04651d4464b300445de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsti_agent_arr_copy</definition>
        <argsstring>(struct fsti_agent_arr *dest, struct fsti_agent_arr *src, bool init_members)</argsstring>
        <name>fsti_agent_arr_copy</name>
        <param>
          <type>struct <ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>struct <ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>init_members</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="301" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="301" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1a6681f5dfe9ce93defe0d395774010080" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsti_agent_ind_copy</definition>
        <argsstring>(struct fsti_agent_ind *dest, struct fsti_agent_ind *src)</argsstring>
        <name>fsti_agent_ind_copy</name>
        <param>
          <type>struct <ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>struct <ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="317" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="317" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1a6ec54eca95530e863760046101ac02e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t fsti_agent_arr_count</definition>
        <argsstring>(struct fsti_agent_arr *agent_arr)</argsstring>
        <name>fsti_agent_arr_count</name>
        <param>
          <type>struct <ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref> *</type>
          <declname>agent_arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="329" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="329" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1ab6a4276af0e80540add3d0a612b91071" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t fsti_agent_ind_count</definition>
        <argsstring>(struct fsti_agent_arr *agent_ind)</argsstring>
        <name>fsti_agent_ind_count</name>
        <param>
          <type>struct <ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref> *</type>
          <declname>agent_ind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="334" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="334" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1a6ea0014798a460e51b30b2d8af0dda25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsti_agent_ind_clear</definition>
        <argsstring>(struct fsti_agent_ind *agent_ind)</argsstring>
        <name>fsti_agent_ind_clear</name>
        <param>
          <type>struct <ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref> *</type>
          <declname>agent_ind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="340" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="340" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1ab9adb18f274475832c5a763be7d001d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsti_agent_ind_free</definition>
        <argsstring>(struct fsti_agent_ind *agent_ind)</argsstring>
        <name>fsti_agent_ind_free</name>
        <param>
          <type>struct <ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref> *</type>
          <declname>agent_ind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="345" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="345" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1a0c1f310e7cd98b4122a4348b0ec26b4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsti_agent_arr_free</definition>
        <argsstring>(struct fsti_agent_arr *agent_arr)</argsstring>
        <name>fsti_agent_arr_free</name>
        <param>
          <type>struct <ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref> *</type>
          <declname>agent_arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="350" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="350" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="fsti-agent_8c_1aa9fa3865ab9658915f20e4212ca4cbe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsti_agent_test</definition>
        <argsstring>(struct test_group *tg)</argsstring>
        <name>fsti_agent_test</name>
        <param>
          <type>struct test_group *</type>
          <declname>tg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" line="365" column="1" bodyfile="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c" bodystart="365" bodyend="541"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;fsti-agent.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;fsti-error.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref><sp/>fsti_saved_agent_arr<sp/>=<sp/>{NULL,<sp/>0,<sp/>0,<sp/>NULL};</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fsti_agent_print_csv(FILE<sp/>*f,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref><sp/>*agent)</highlight></codeline>
<codeline lineno="13"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>FSTI_AGENT_PRINT_CSV(f,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>agent);</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fsti_agent_print_pretty(FILE<sp/>*f,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref><sp/>*agent)</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>FSTI_AGENT_PRINT_PRETTY(f,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>agent);</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fsti_agent_has_partner(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref><sp/>*agent)</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(agent-&gt;num_partners)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fsti_agent_make_half_partner(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref><sp/>*a,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref><sp/>*b)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>a-&gt;partners[a-&gt;num_partners++]<sp/>=<sp/>b-&gt;id;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fsti_agent_make_partners(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref><sp/>*a,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref><sp/>*b)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>fsti_agent_make_half_partner(a,<sp/>b);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>fsti_agent_make_half_partner(b,<sp/>a);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>FSTI_HOOK_AFTER_MAKE_PARTNERS(a,<sp/>b);</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fsti_agent_break_half_partner(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref><sp/>*a,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref><sp/>*b)</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(a-&gt;num_partners);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>a-&gt;num_partners;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;partners[i]<sp/>==<sp/>b-&gt;id)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;partners[i]<sp/>=<sp/>a-&gt;partners[a-&gt;num_partners<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;num_partners--;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fsti_agent_break_partners(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref><sp/>*a,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref><sp/>*b)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(a-&gt;num_partners);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(b-&gt;num_partners);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>fsti_agent_break_half_partner(a,<sp/>b);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>fsti_agent_break_half_partner(b,<sp/>a);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fsti_agent_default_distance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref><sp/>*a,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref><sp/>*b)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;sex_preferred<sp/>!=<sp/>b-&gt;sex)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>25.0;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b-&gt;sex_preferred<sp/>!=<sp/>a-&gt;sex)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>25.0;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>fabs(a-&gt;age<sp/>-<sp/>b-&gt;age);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fsti_agent_arr_add_dependency(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref><sp/>*agent_arr,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref><sp/>*agent_ind)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfsti__ind__list" kindref="compound">fsti_ind_list</ref><sp/>*node;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*node));</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>FSTI_ASSERT(node,<sp/>FSTI_ERR_NOMEM,<sp/>NULL);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>agent_ind-&gt;agent_arr<sp/>=<sp/>agent_arr;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;next<sp/>=<sp/>agent_arr-&gt;ind_list;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;ind<sp/>=<sp/>agent_ind;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>agent_arr-&gt;ind_list<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fsti_agent_arr_fill_n(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref><sp/>*agent_arr,<sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>agent_arr-&gt;agents<sp/>=<sp/>calloc(n,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref>));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>FSTI_ASSERT(agent_arr-&gt;agents,<sp/>FSTI_ERR_NOMEM,<sp/>NULL);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_arr-&gt;agents[i].id<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>agent_arr-&gt;len<sp/>=<sp/>agent_arr-&gt;capacity<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fsti_agent_arr_init_n(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref><sp/>*agent_arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsti_agent_arr_fill_n(agent_arr,<sp/>n);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_arr-&gt;agents<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_arr-&gt;len<sp/>=<sp/>agent_arr-&gt;capacity<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>agent_arr-&gt;ind_list<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fsti_agent_arr_init(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref><sp/>*agent_arr)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>fsti_agent_arr_init_n(agent_arr,<sp/>0);</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref><sp/>*<sp/>fsti_agent_arr_begin(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref><sp/>*agent_arr)</highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>agent_arr-&gt;agents;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref><sp/>*<sp/>fsti_agent_arr_end(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref><sp/>*agent_arr)</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>agent_arr-&gt;agents<sp/>+<sp/>agent_arr-&gt;len;</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref><sp/>*<sp/>fsti_agent_arr_at(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref><sp/>*agent_arr,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>agent_arr-&gt;agents<sp/>+<sp/>index;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref><sp/>*<sp/>fsti_agent_arr_front(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref><sp/>*agent_arr)</highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fsti_agent_arr_begin(agent_arr);</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref><sp/>*<sp/>fsti_agent_arr_back(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref><sp/>*agent_arr)</highlight></codeline>
<codeline lineno="137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>agent_arr-&gt;agents<sp/>+<sp/>agent_arr-&gt;len<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref><sp/>*fsti_agent_partner_get(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref><sp/>*agent_arr,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref><sp/>*agent,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="144"><highlight class="normal">{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>agent-&gt;num_partners)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>agent_arr-&gt;agents<sp/>+<sp/>agent-&gt;partners[index];</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref><sp/>*fsti_agent_partner_get0(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref><sp/>*agent_arr,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref><sp/>*agent)</highlight></codeline>
<codeline lineno="153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fsti_agent_partner_get(agent_arr,<sp/>agent,<sp/>0);</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>arr_allocate(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref><sp/>*agent_arr)</highlight></codeline>
<codeline lineno="158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref><sp/>*<sp/>agents;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(agent_arr-&gt;capacity<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_arr-&gt;capacity<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_arr-&gt;capacity<sp/>=<sp/>(3<sp/>*<sp/>agent_arr-&gt;capacity)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>agents<sp/>=<sp/>realloc(agent_arr-&gt;agents,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref>)<sp/>*<sp/>agent_arr-&gt;capacity);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>FSTI_ASSERT(agents,<sp/>FSTI_ERR_NOMEM,<sp/>NULL);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>agent_arr-&gt;agents<sp/>=<sp/>agents;</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ind_allocate(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref><sp/>*agent_ind)</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*<sp/>indices;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(agent_ind-&gt;capacity<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_ind-&gt;capacity<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_ind-&gt;capacity<sp/>=<sp/>(3<sp/>*<sp/>agent_ind-&gt;capacity)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>indices<sp/>=<sp/>realloc(agent_ind-&gt;indices,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>*<sp/><sp/>agent_ind-&gt;capacity);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>FSTI_ASSERT(indices,<sp/>FSTI_ERR_NOMEM,<sp/>NULL);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>agent_ind-&gt;indices<sp/>=<sp/>indices;</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fsti_agent_arr_push(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref><sp/>*agent_arr,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref><sp/>*agent)</highlight></codeline>
<codeline lineno="186"><highlight class="normal">{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(agent_arr-&gt;len<sp/>==<sp/>agent_arr-&gt;capacity)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arr_allocate(agent_arr);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(agent)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_arr-&gt;agents[agent_arr-&gt;len]<sp/>=<sp/>*agent;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(agent_arr-&gt;agents<sp/>+<sp/>agent_arr-&gt;len,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref>));</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>agent_arr-&gt;agents[agent_arr-&gt;len].id<sp/>=<sp/>agent_arr-&gt;len;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>agent_arr-&gt;len++;</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref><sp/>*fsti_agent_arr_pop(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref><sp/>*agent_arr)</highlight></codeline>
<codeline lineno="200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(agent_arr-&gt;len);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>agent_arr-&gt;len--;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>agent_arr-&gt;agents<sp/>+<sp/>agent_arr-&gt;len;</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fsti_agent_ind_fill_n(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref><sp/>*agent_ind,<sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="207"><highlight class="normal">{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>agent_ind-&gt;indices<sp/>=<sp/>calloc(n,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>FSTI_ASSERT(agent_ind-&gt;indices,<sp/>FSTI_ERR_NOMEM,<sp/>NULL);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_ind-&gt;indices[i]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>agent_ind-&gt;len<sp/>=<sp/>agent_ind-&gt;capacity<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fsti_agent_ind_init_n(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref><sp/>*agent_ind,</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref><sp/>*agent_arr,</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(n<sp/>&lt;=<sp/>agent_arr-&gt;len);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>agent_ind-&gt;agent_arr<sp/>=<sp/>agent_arr;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsti_agent_ind_fill_n(agent_ind,<sp/>n);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_ind-&gt;indices<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_ind-&gt;len<sp/>=<sp/>agent_ind-&gt;capacity<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>fsti_agent_arr_add_dependency(agent_arr,<sp/>agent_ind);</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fsti_agent_ind_init(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref><sp/>*agent_ind,</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref><sp/>*agent_arr)</highlight></codeline>
<codeline lineno="233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>fsti_agent_ind_init_n(agent_ind,<sp/>agent_arr,<sp/>agent_arr-&gt;len);</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*fsti_agent_ind_begin(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref><sp/>*agent_ind)</highlight></codeline>
<codeline lineno="238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>agent_ind-&gt;indices;</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*fsti_agent_ind_end(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref><sp/>*agent_ind)</highlight></codeline>
<codeline lineno="243"><highlight class="normal">{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>agent_ind-&gt;indices<sp/>+<sp/>agent_ind-&gt;len;</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*fsti_agent_ind_at(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref><sp/>*agent_ind,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="248"><highlight class="normal">{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>agent_ind-&gt;indices<sp/>+<sp/>index;</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref><sp/>*</highlight></codeline>
<codeline lineno="253"><highlight class="normal">fsti_agent_ind_arrp(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref><sp/>*agent_ind,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*it)</highlight></codeline>
<codeline lineno="254"><highlight class="normal">{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fsti_agent_arr_at(agent_ind-&gt;agent_arr,<sp/>*it);</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref><sp/>*</highlight></codeline>
<codeline lineno="259"><highlight class="normal">fsti_agent_ind_arr(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref><sp/>*agent_ind,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="260"><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fsti_agent_arr_at(agent_ind-&gt;agent_arr,<sp/>agent_ind-&gt;indices[index]);</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fsti_agent_ind_push(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref><sp/>*agent_ind,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="266"><highlight class="normal">{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(index<sp/>&lt;<sp/>agent_ind-&gt;agent_arr-&gt;len);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(agent_ind-&gt;len<sp/>==<sp/>agent_ind-&gt;capacity)</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind_allocate(agent_ind);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>agent_ind-&gt;indices[agent_ind-&gt;len]<sp/>=<sp/>index;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>agent_ind-&gt;len++;</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>fsti_agent_ind_pop(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref><sp/>*agent_ind)</highlight></codeline>
<codeline lineno="276"><highlight class="normal">{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(agent_ind-&gt;len);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>agent_ind-&gt;len--;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>agent_ind-&gt;indices[agent_ind-&gt;len];</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fsti_agent_ind_remove(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref><sp/>*agent_ind,</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*it)</highlight></codeline>
<codeline lineno="284"><highlight class="normal">{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>agent_ind-&gt;len--;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>*it<sp/>=<sp/>agent_ind-&gt;indices[agent_ind-&gt;len];</highlight></codeline>
<codeline lineno="287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fsti_agent_ind_shuffle(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref><sp/>*agent_ind,<sp/>gsl_rng<sp/>*rng)</highlight></codeline>
<codeline lineno="290"><highlight class="normal">{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(agent_ind-&gt;len<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>agent_ind-&gt;len<sp/>-<sp/>1;<sp/>i<sp/>&gt;<sp/>0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>(size_t)<sp/>gsl_rng_uniform_int(rng,<sp/>i<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>agent_ind-&gt;indices[j];</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_ind-&gt;indices[j]<sp/>=<sp/>agent_ind-&gt;indices[i];</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_ind-&gt;indices[i]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fsti_agent_arr_copy(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref><sp/>*dest,</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref><sp/>*src,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>init_members)</highlight></codeline>
<codeline lineno="304"><highlight class="normal">{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>dest-&gt;agents<sp/>=<sp/>malloc(src-&gt;len<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref>));</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>FSTI_ASSERT(dest-&gt;agents,<sp/>FSTI_ERR_NOMEM,<sp/>NULL);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>dest-&gt;capacity<sp/>=<sp/>dest-&gt;len<sp/>=<sp/>src-&gt;len;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(init_members)</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest-&gt;ind_list<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(dest-&gt;agents,<sp/>src-&gt;agents,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref>)<sp/>*<sp/>src-&gt;len);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>FSTI_HOOK_AGENT_ARR_COPY(dest,<sp/>src);</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fsti_agent_ind_copy(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref><sp/>*dest,</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref><sp/>*src)</highlight></codeline>
<codeline lineno="319"><highlight class="normal">{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>dest-&gt;indices<sp/>=<sp/>malloc(src-&gt;len<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>FSTI_ASSERT(dest-&gt;indices,<sp/>FSTI_ERR_NOMEM,<sp/>NULL);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>dest-&gt;capacity<sp/>=<sp/>dest-&gt;len<sp/>=<sp/>src-&gt;len;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>dest-&gt;agent_arr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(dest-&gt;indices,<sp/>src-&gt;indices,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>*<sp/>src-&gt;len);</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>fsti_agent_arr_count(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref><sp/>*agent_arr)</highlight></codeline>
<codeline lineno="330"><highlight class="normal">{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>agent_arr-&gt;len;</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>fsti_agent_ind_count(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref><sp/>*agent_ind)</highlight></codeline>
<codeline lineno="335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>agent_ind-&gt;len;</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fsti_agent_ind_clear(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref><sp/>*agent_ind)</highlight></codeline>
<codeline lineno="341"><highlight class="normal">{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>agent_ind-&gt;len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fsti_agent_ind_free(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref><sp/>*agent_ind)</highlight></codeline>
<codeline lineno="346"><highlight class="normal">{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>free(agent_ind-&gt;indices);</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fsti_agent_arr_free(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref><sp/>*agent_arr)</highlight></codeline>
<codeline lineno="351"><highlight class="normal">{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfsti__ind__list" kindref="compound">fsti_ind_list</ref><sp/>*node,<sp/>*prev;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>FSTI_HOOK_AGENT_ARR_FREE(agent_arr);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>free(agent_arr-&gt;agents);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/>=<sp/>agent_arr-&gt;ind_list;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsti_agent_ind_free(node-&gt;ind);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;next;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(prev);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fsti_agent_test(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>test_group<sp/>*tg)</highlight></codeline>
<codeline lineno="366"><highlight class="normal">{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfsti__agent__arr" kindref="compound">fsti_agent_arr</ref><sp/>agent_arr,<sp/>copy_arr;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfsti__agent__ind" kindref="compound">fsti_agent_ind</ref><sp/>living,<sp/>mating_pool,<sp/>copy_ind,<sp/>dead,<sp/>shuffler;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref><sp/>*agent;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*it,<sp/>id;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref><sp/>a,<sp/>*x,<sp/>*y;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>correct,<sp/>ordered;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>gsl_rng<sp/>*rng;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>fsti_agent_arr_init_n(&amp;agent_arr,<sp/>101);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>fsti_agent_ind_init(&amp;living,<sp/>&amp;agent_arr);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>fsti_agent_ind_init_n(&amp;mating_pool,<sp/>&amp;agent_arr,<sp/>0);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(agent_arr.len,<sp/>101,<sp/>*tg);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(living.len,<sp/>agent_arr.len,<sp/>*tg);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(mating_pool.len,<sp/>0,<sp/>*tg);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>correct<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(agent<sp/>=<sp/>agent_arr.agents;<sp/>agent<sp/>&lt;<sp/>agent_arr.agents<sp/>+<sp/>agent_arr.len;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent++)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(agent-&gt;id<sp/>==<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">++;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correct<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>101,<sp/>*tg);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(correct,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>*tg);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>correct<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(agent<sp/>=<sp/>fsti_agent_arr_begin(&amp;agent_arr);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent<sp/>&lt;<sp/>fsti_agent_arr_end(&amp;agent_arr);<sp/>agent++)<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(agent-&gt;id<sp/>==<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">++;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correct<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>101,<sp/>*tg);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(correct,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>*tg);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>correct<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it<sp/>=<sp/>fsti_agent_ind_begin(&amp;living);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>&lt;<sp/>fsti_agent_ind_end(&amp;living);<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsti_agent_ind_arrp(&amp;living,<sp/>it)-&gt;id<sp/>==<sp/>id)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">++;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correct<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>101,<sp/>*tg);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(correct,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>*tg);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;a,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfsti__agent" kindref="compound">fsti_agent</ref>));</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>a.infected<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>fsti_agent_arr_push(&amp;agent_arr,<sp/>&amp;a);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>fsti_agent_ind_push(&amp;living,<sp/>fsti_agent_arr_back(&amp;agent_arr)-&gt;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>correct<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it<sp/>=<sp/>fsti_agent_ind_begin(&amp;living);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>&lt;<sp/>fsti_agent_ind_end(&amp;living);<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsti_agent_ind_arrp(&amp;living,<sp/>it)-&gt;id<sp/>==<sp/>id)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">++;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correct<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>102,<sp/>*tg);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(correct,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>*tg);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(fsti_agent_arr_back(&amp;agent_arr)-&gt;infected,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>*tg);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>correct<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>FSTI_FOR(living,<sp/>agent,<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(agent-&gt;id<sp/>==<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id++;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correct<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>102,<sp/>*tg);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(correct,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>*tg);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>FSTI_FOR(living,<sp/>agent,<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(agent-&gt;id<sp/>%<sp/>2<sp/>==<sp/>0)<sp/>fsti_agent_ind_push(&amp;mating_pool,<sp/>agent-&gt;id);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(mating_pool.len,<sp/>agent_arr.len<sp/>/<sp/>2,<sp/>*tg);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>fsti_agent_arr_push(&amp;agent_arr,<sp/>NULL);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>correct<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it<sp/>=<sp/>fsti_agent_ind_begin(&amp;mating_pool);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>&lt;<sp/>fsti_agent_ind_end(&amp;mating_pool);<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsti_agent_ind_arrp(&amp;mating_pool,<sp/>it)-&gt;id<sp/>%<sp/>2)</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correct<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(correct,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>*tg);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>fsti_agent_ind_arr(&amp;mating_pool,<sp/>0);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>fsti_agent_ind_arr(&amp;mating_pool,<sp/>mating_pool.len<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>fsti_agent_make_partners(x,<sp/>y);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(x-&gt;partners[0],<sp/>y-&gt;id,<sp/>*tg);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(y-&gt;partners[0],<sp/>x-&gt;id,<sp/>*tg);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>fsti_agent_arr_copy(&amp;copy_arr,<sp/>&amp;agent_arr,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>fsti_agent_ind_init(&amp;copy_ind,<sp/>&amp;copy_arr);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(copy_ind.len,<sp/>copy_arr.len,<sp/>*tg);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(copy_ind.len,<sp/>agent_arr.len,<sp/>*tg);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>correct<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it=fsti_agent_ind_begin(&amp;copy_ind);it&lt;fsti_agent_ind_end(&amp;copy_ind);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fsti_agent_ind_arrp(&amp;copy_ind,<sp/>it)-&gt;id<sp/>!=</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsti_agent_arr_at(&amp;agent_arr,<sp/>*it)-&gt;id)</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correct<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(correct,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>*tg);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>fsti_agent_ind_init_n(&amp;dead,<sp/>&amp;agent_arr,<sp/>10);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(dead.len,<sp/>10,<sp/>*tg);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>rng<sp/>=<sp/>gsl_rng_alloc(gsl_rng_mt19937);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>fsti_agent_ind_init_n(&amp;shuffler,<sp/>&amp;agent_arr,<sp/>0);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(shuffler.len,<sp/>0,<sp/>*tg);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>fsti_agent_ind_shuffle(&amp;shuffler,<sp/>rng);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(shuffler.len,<sp/>0,<sp/>*tg);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>fsti_agent_ind_push(&amp;shuffler,<sp/>0);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>fsti_agent_ind_shuffle(&amp;shuffler,<sp/>rng);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(shuffler.len,<sp/>1,<sp/>*tg);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>fsti_agent_ind_push(&amp;shuffler,<sp/>1);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>correct<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>100;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsti_agent_ind_shuffle(&amp;shuffler,<sp/>rng);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shuffler.indices[0]<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>shuffler.indices[1]<sp/>==<sp/>0)<sp/>count++;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(shuffler.len,<sp/>2,<sp/>*tg);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(count<sp/>&gt;<sp/>20,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>*tg);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(count<sp/>&lt;<sp/>80,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>*tg);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>fsti_agent_ind_clear(&amp;shuffler);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>arr[agent_arr.len];</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;agent_arr.len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsti_agent_ind_push(&amp;shuffler,<sp/>i);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arr[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>ordered<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;agent_arr.len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shuffler.indices[i]<sp/>!=<sp/>shuffler.indices[i<sp/>-<sp/>1]<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ordered<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(ordered,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>*tg);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>fsti_agent_ind_shuffle(&amp;shuffler,<sp/>rng);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;agent_arr.len;<sp/>++i)<sp/>arr[shuffler.indices[i]]++;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;agent_arr.len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shuffler.indices[i]<sp/>!=<sp/>shuffler.indices[i<sp/>-<sp/>1]<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ordered<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(ordered,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>*tg);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>correct<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;agent_arr.len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arr[i]<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correct<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTEQ(correct,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>*tg);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>gsl_rng_free(rng);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>fsti_agent_arr_free(&amp;copy_arr);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>fsti_agent_arr_free(&amp;agent_arr);</highlight></codeline>
<codeline lineno="541"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/eduardgrebe/dev/faststi-eduard/src/fsti-agent.c"/>
  </compounddef>
</doxygen>
